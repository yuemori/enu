// This code was generated by a tool.
package enu

{{- if .ImportPkg}}
import {{.ImportPkg}}
{{end}}

type Enumerator{{.Suffix}}[{{.TypeWithConstraint}}] struct {
	iter   IEnumerable[{{.ItemType}}]
}

func New{{.Suffix}}[{{.TypeWithConstraint}}](e IEnumerable[{{.ItemType}}]) *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{iter: e}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Each(iteratee func({{.ItemType}}, int)) {
	each(e.iter, func(item {{.ItemType}}, index int) bool {
		iteratee(item, index)
		return true
	})
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) ToSlice() []{{.ItemType}} {
	return ToSlice(e.iter)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Count() int {
	return Count(e.iter)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Filter(predicate func({{.ItemType}}, int) bool) *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{
		iter: Filter(e.iter, predicate),
	}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Nth(nth int) ({{.ItemType}}, bool) {
	return Nth(e.iter, nth)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Find(predicate func({{.ItemType}}, int) bool) ({{.ItemType}}, bool) {
	return Find(e.iter, predicate)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) First() ({{.ItemType}}, bool) {
	return First(e.iter)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Last() ({{.ItemType}}, bool) {
	return Last(e.iter)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Reverse() *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{iter: Reverse(e.iter)}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) SortBy(sorter func(i, j {{.ItemType}}) bool) *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{iter: SortBy(e.iter, sorter)}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Reject(predicate func({{.ItemType}}, int) bool) *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{iter: Reject(e.iter, predicate)}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) IsAll(predicate func({{.ItemType}}) bool) bool {
	return IsAll(e.iter, predicate)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) IsAny(predicate func({{.ItemType}}) bool) bool {
	return IsAny(e.iter, predicate)
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) Take(num uint) *Enumerator{{.Suffix}}[{{.Type}}] {
	return &Enumerator{{.Suffix}}[{{.Type}}]{iter: Take(e.iter, num)}
}

func (e *Enumerator{{.Suffix}}[{{.Type}}]) GetEnumerator() *Enumerator[{{.ItemType}}] {
	return &Enumerator[{{.ItemType}}]{iter: e.iter}
}
