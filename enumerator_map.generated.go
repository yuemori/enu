// This code was generated by a tool.
package enu

type EnumeratorMap[K comparable, V any] struct {
	iter   IEnumerable[KeyValuePair[K, V]]
}

func NewMap[K comparable, V any](e IEnumerable[KeyValuePair[K, V]]) *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{iter: e}
}

func (e *EnumeratorMap[K, V]) Each(iteratee func(KeyValuePair[K, V], int)) {
	each(e.iter, func(item KeyValuePair[K, V], index int) bool {
		iteratee(item, index)
		return true
	})
}

func (e *EnumeratorMap[K, V]) ToSlice() []KeyValuePair[K, V] {
	return ToSlice(e.iter)
}

func (e *EnumeratorMap[K, V]) Count() int {
	return Count(e.iter)
}

func (e *EnumeratorMap[K, V]) Filter(predicate func(KeyValuePair[K, V], int) bool) *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{
		iter: Filter(e.iter, predicate),
	}
}

func (e *EnumeratorMap[K, V]) Nth(nth int) (KeyValuePair[K, V], bool) {
	return Nth(e.iter, nth)
}

func (e *EnumeratorMap[K, V]) Find(predicate func(KeyValuePair[K, V], int) bool) (KeyValuePair[K, V], bool) {
	return Find(e.iter, predicate)
}

func (e *EnumeratorMap[K, V]) First() (KeyValuePair[K, V], bool) {
	return First(e.iter)
}

func (e *EnumeratorMap[K, V]) Last() (KeyValuePair[K, V], bool) {
	return Last(e.iter)
}

func (e *EnumeratorMap[K, V]) Reverse() *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{iter: Reverse(e.iter)}
}

func (e *EnumeratorMap[K, V]) SortBy(sorter func(i, j KeyValuePair[K, V]) bool) *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{iter: SortBy(e.iter, sorter)}
}

func (e *EnumeratorMap[K, V]) Reject(predicate func(KeyValuePair[K, V], int) bool) *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{iter: Reject(e.iter, predicate)}
}

func (e *EnumeratorMap[K, V]) IsAll(predicate func(KeyValuePair[K, V]) bool) bool {
	return IsAll(e.iter, predicate)
}

func (e *EnumeratorMap[K, V]) IsAny(predicate func(KeyValuePair[K, V]) bool) bool {
	return IsAny(e.iter, predicate)
}

func (e *EnumeratorMap[K, V]) Take(num uint) *EnumeratorMap[K, V] {
	return &EnumeratorMap[K, V]{iter: Take(e.iter, num)}
}

func (e *EnumeratorMap[K, V]) GetEnumerator() *Enumerator[KeyValuePair[K, V]] {
	return &Enumerator[KeyValuePair[K, V]]{iter: e.iter}
}
