// This code was generated by a tool.
package enu

type ComparerEnumerable[T comparable] struct {
	enumerator IEnumerator[T]
}

func NewComparer[T comparable](e IEnumerator[T]) *ComparerEnumerable[T] {
	return &ComparerEnumerable[T]{enumerator: e}
}

func (e *ComparerEnumerable[T]) Each(iteratee func(T, int)) *ComparerEnumerable[T] {
	each[T](e, func(item T, index int) bool {
		iteratee(item, index)
		return true
	})
	return e
}

func (e *ComparerEnumerable[T]) ToSlice() []T {
	return ToSlice[T](e)
}

func (e *ComparerEnumerable[T]) Count() int {
	return Count[T](e)
}

func (e *ComparerEnumerable[T]) Filter(predicate func(T, int) bool) *ComparerEnumerable[T] {
	return NewComparer[T](Filter[T](e, predicate))
}

func (e *ComparerEnumerable[T]) Nth(nth int) (T, bool) {
	return Nth[T](e, nth)
}

func (e *ComparerEnumerable[T]) Find(predicate func(T, int) bool) (T, bool) {
	return Find[T](e, predicate)
}

func (e *ComparerEnumerable[T]) First() (T, bool) {
	return First[T](e)
}

func (e *ComparerEnumerable[T]) Last() (T, bool) {
	return Last[T](e)
}

func (e *ComparerEnumerable[T]) Reverse() *ComparerEnumerable[T] {
	return NewComparer[T](Reverse[T](e))
}

func (e *ComparerEnumerable[T]) SortBy(sorter func(i, j T) bool) *ComparerEnumerable[T] {
	return NewComparer[T](SortBy[T](e, sorter))
}

func (e *ComparerEnumerable[T]) Reject(predicate func(T, int) bool) *ComparerEnumerable[T] {
	return NewComparer[T](Reject[T](e, predicate))
}

func (e *ComparerEnumerable[T]) IsAll(predicate func(T) bool) bool {
	return IsAll[T](e, predicate)
}

func (e *ComparerEnumerable[T]) IsAny(predicate func(T) bool) bool {
	return IsAny[T](e, predicate)
}

func (e *ComparerEnumerable[T]) Take(num int) *ComparerEnumerable[T] {
	return NewComparer[T](Take[T](e, num))
}

func (e *ComparerEnumerable[T]) Result(out *[]T) *ComparerEnumerable[T] {
	Result[T](e, out)

	return e
}

func (e *ComparerEnumerable[T]) Err() error {
	if p, ok := e.enumerator.(ErrorProvider); ok {
		return p.Err()
	}
	return nil
}

func (e *ComparerEnumerable[T]) GetEnumerator() IEnumerator[T] {
	return e.enumerator
}

func (e *ComparerEnumerable[T]) ToMap() map[int]T {
	return Reduce[T](e, func(agg map[int]T, item T, index int) map[int]T {
		agg[index] = item
		return agg
	}, map[int]T{})
}

func (e *ComparerEnumerable[T]) Uniq() *ComparerEnumerable[T] {
	return NewComparer[T](Uniq[T](e))
}

func (e *ComparerEnumerable[T]) Contains(item T) bool {
	return Contains[T](e, item)
}

func (e *ComparerEnumerable[T]) IndexOf(item T) int {
	return IndexOf[T](e, item)
}
